import streamlit as st
import os
import tempfile
import sys
import importlib

# Configuraci√≥n de la p√°gina
st.set_page_config(
    page_title="Transcriptor de Audio en Espa√±ol",
    page_icon="üé§",
    layout="wide"
)

# Funci√≥n para verificar e instalar whisper
def check_and_install_whisper():
    try:
        import whisper
        st.success("‚úÖ Whisper est√° instalado correctamente")
        return True
    except ImportError:
        st.error("‚ùå Whisper no est√° instalado. Por favor, instala las dependencias necesarias.")
        st.code("""
        # Para instalar Whisper y sus dependencias:
        pip install openai-whisper
        
        # Tambi√©n necesitar√°s ffmpeg:
        # En Ubuntu/Debian:
        sudo apt update && sudo apt install ffmpeg
        
        # En macOS con Homebrew:
        brew install ffmpeg
        
        # En Windows, descarga ffmpeg desde https://ffmpeg.org/download.html
        """)
        return False

# Verificar si whisper est√° instalado
if not check_and_install_whisper():
    st.stop()

# Ahora importamos whisper despu√©s de verificar que est√° instalado
import whisper

# T√≠tulo y descripci√≥n
st.title("üé§ Transcriptor de Audio en Espa√±ol")
st.markdown("""
Esta aplicaci√≥n transcribe archivos de audio en espa√±ol utilizando el modelo Whisper de OpenAI.
Simplemente carga tu archivo de audio y espera la transcripci√≥n.
""")

# Barra lateral para configuraci√≥n
st.sidebar.header("Configuraci√≥n")

# Selector de modelo
model_options = {
    "tiny": "Tiny (39MB, m√°s r√°pido, menos preciso)",
    "base": "Base (74MB, equilibrio velocidad-precisi√≥n)",
    "small": "Small (244MB, buena precisi√≥n)",
    "medium": "Medium (769MB, alta precisi√≥n)",
    "large": "Large (1550MB, m√°xima precisi√≥n)"
}

selected_model = st.sidebar.selectbox(
    "Selecciona un modelo de Whisper:",
    options=list(model_options.keys()),
    format_func=lambda x: model_options[x],
    index=1  # Por defecto "base"
)

# Informaci√≥n sobre el modelo
st.sidebar.info(f"""
Modelo seleccionado: {selected_model}

Tama√±os y caracter√≠sticas:
- Tiny: R√°pido pero menos preciso
- Base: Buen equilibrio
- Small: Buena precisi√≥n
- Medium: Alta precisi√≥n
- Large: M√°xima precisi√≥n (requiere m√°s recursos)
""")

# Funci√≥n para cargar el modelo
@st.cache_resource(show_spinner=False)
def load_whisper_model(model_name: str):
    """
    Carga el modelo de Whisper y lo cachea para no tener que recargarlo en cada ejecuci√≥n.
    """
    try:
        with st.spinner(f"Cargando modelo {model_name}... Esto puede tardar unos minutos."):
            model = whisper.load_model(model_name)
        return model
    except Exception as e:
        st.error(f"Error al cargar el modelo: {str(e)}")
        return None

# √Årea principal para cargar el archivo
audio_file = st.file_uploader(
    "Sube un archivo de audio (MP3, WAV, M4A, etc.):",
    type=["mp3", "wav", "m4a", "ogg", "flac", "aac"]
)

# Bot√≥n para transcribir
transcribe_button = st.button("Transcribir Audio", disabled=not audio_file)

# Procesamiento y transcripci√≥n
if transcribe_button and audio_file:
    # Crear un archivo temporal para guardar el audio subido
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(audio_file.read())
        temp_file_path = temp_file.name

    try:
        # Cargar el modelo
        model = load_whisper_model(selected_model)
        
        if model is None:
            st.error("No se pudo cargar el modelo. Por favor, intenta con otro modelo o verifica tu instalaci√≥n.")
            st.stop()
        
        # Mostrar mensaje de procesamiento
        with st.spinner("Transcribiendo audio... Por favor espera."):
            # Transcribir el audio
            result = model.transcribe(
                temp_file_path,
                language="es",
                verbose=False,  # Cambiar a True para ver detalles del proceso
                fp16=False  # False para compatibilidad con m√°s dispositivos
            )
        
        # Mostrar la transcripci√≥n
        st.subheader("Transcripci√≥n:")
        st.text_area("Texto transcrito:", value=result["text"], height=300)
        
        # Opci√≥n para descargar la transcripci√≥n
        st.download_button(
            label="Descargar transcripci√≥n como archivo de texto",
            data=result["text"],
            file_name=f"transcripcion_{os.path.splitext(audio_file.name)[0]}.txt",
            mime="text/plain"
        )
        
        # Mostrar informaci√≥n adicional si est√° disponible
        if "segments" in result:
            with st.expander("Ver segmentos con marcas de tiempo"):
                segments_df = []
                for segment in result["segments"]:
                    segments_df.append({
                        "Inicio": f"{segment['start']:.2f}s",
                        "Fin": f"{segment['end']:.2f}s",
                        "Texto": segment["text"]
                    })
                
                st.dataframe(segments_df)
    
    except Exception as e:
        st.error(f"Ocurri√≥ un error durante la transcripci√≥n: {str(e)}")
    
    finally:
        # Eliminar el archivo temporal
        if os.path.exists(temp_file_path):
            os.unlink(temp_file_path)

# Instrucciones adicionales
with st.expander("Instrucciones de uso"):
    st.markdown("""
    1. Selecciona el modelo de Whisper que deseas usar en la barra lateral.
       - Modelos m√°s grandes son m√°s precisos pero requieren m√°s tiempo y recursos.
    2. Sube un archivo de audio en espa√±ol usando el bot√≥n de arriba.
       - Formatos soportados: MP3, WAV, M4A, OGG, FLAC, AAC.
    3. Haz clic en el bot√≥n "Transcribir Audio".
    4. Espera a que se complete la transcripci√≥n.
    5. Puedes descargar la transcripci√≥n como un archivo de texto.
    
    **Nota:** La primera vez que uses un modelo, este se descargar√°, lo que puede tardar varios minutos dependiendo del tama√±o del modelo y tu conexi√≥n a internet.
    """)

# Informaci√≥n sobre la tecnolog√≠a utilizada
st.markdown("---")
st.markdown("""
Esta aplicaci√≥n utiliza [Whisper](https://openai.com/research/whisper), un modelo de reconocimiento de voz desarrollado por OpenAI.
Whisper ofrece un rendimiento robusto en la transcripci√≥n de audio en m√∫ltiples idiomas, incluido el espa√±ol.
""")
